package com.quanttrading.strategy;

import com.quanttrading.model.TradeType;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * Represents a trading signal generated by a strategy.
 */
public class TradingSignal {
    
    private final String symbol;
    private final TradeType tradeType;
    private final BigDecimal quantity;
    private final BigDecimal targetPrice;
    private final BigDecimal stopLoss;
    private final BigDecimal takeProfit;
    private final String strategyName;
    private final LocalDateTime timestamp;
    private final double confidence;
    private final String reason;
    
    private TradingSignal(Builder builder) {
        this.symbol = builder.symbol;
        this.tradeType = builder.tradeType;
        this.quantity = builder.quantity;
        this.targetPrice = builder.targetPrice;
        this.stopLoss = builder.stopLoss;
        this.takeProfit = builder.takeProfit;
        this.strategyName = builder.strategyName;
        this.timestamp = builder.timestamp != null ? builder.timestamp : LocalDateTime.now();
        this.confidence = builder.confidence;
        this.reason = builder.reason;
    }
    
    public String getSymbol() {
        return symbol;
    }
    
    public TradeType getTradeType() {
        return tradeType;
    }
    
    public BigDecimal getQuantity() {
        return quantity;
    }
    
    public BigDecimal getTargetPrice() {
        return targetPrice;
    }
    
    public BigDecimal getStopLoss() {
        return stopLoss;
    }
    
    public BigDecimal getTakeProfit() {
        return takeProfit;
    }
    
    public String getStrategyName() {
        return strategyName;
    }
    
    public LocalDateTime getTimestamp() {
        return timestamp;
    }
    
    public double getConfidence() {
        return confidence;
    }
    
    public String getReason() {
        return reason;
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        TradingSignal that = (TradingSignal) o;
        return Double.compare(that.confidence, confidence) == 0 &&
                Objects.equals(symbol, that.symbol) &&
                tradeType == that.tradeType &&
                Objects.equals(quantity, that.quantity) &&
                Objects.equals(targetPrice, that.targetPrice) &&
                Objects.equals(stopLoss, that.stopLoss) &&
                Objects.equals(takeProfit, that.takeProfit) &&
                Objects.equals(strategyName, that.strategyName) &&
                Objects.equals(timestamp, that.timestamp) &&
                Objects.equals(reason, that.reason);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(symbol, tradeType, quantity, targetPrice, stopLoss, 
                           takeProfit, strategyName, timestamp, confidence, reason);
    }
    
    @Override
    public String toString() {
        return "TradingSignal{" +
                "symbol='" + symbol + '\'' +
                ", tradeType=" + tradeType +
                ", quantity=" + quantity +
                ", targetPrice=" + targetPrice +
                ", strategyName='" + strategyName + '\'' +
                ", confidence=" + confidence +
                ", reason='" + reason + '\'' +
                '}';
    }
    
    public static Builder builder() {
        return new Builder();
    }
    
    public static class Builder {
        private String symbol;
        private TradeType tradeType;
        private BigDecimal quantity;
        private BigDecimal targetPrice;
        private BigDecimal stopLoss;
        private BigDecimal takeProfit;
        private String strategyName;
        private LocalDateTime timestamp;
        private double confidence = 0.5; // Default confidence
        private String reason;
        
        public Builder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }
        
        public Builder tradeType(TradeType tradeType) {
            this.tradeType = tradeType;
            return this;
        }
        
        public Builder quantity(BigDecimal quantity) {
            this.quantity = quantity;
            return this;
        }
        
        public Builder targetPrice(BigDecimal targetPrice) {
            this.targetPrice = targetPrice;
            return this;
        }
        
        public Builder stopLoss(BigDecimal stopLoss) {
            this.stopLoss = stopLoss;
            return this;
        }
        
        public Builder takeProfit(BigDecimal takeProfit) {
            this.takeProfit = takeProfit;
            return this;
        }
        
        public Builder strategyName(String strategyName) {
            this.strategyName = strategyName;
            return this;
        }
        
        public Builder timestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        public Builder confidence(double confidence) {
            this.confidence = confidence;
            return this;
        }
        
        public Builder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        public TradingSignal build() {
            Objects.requireNonNull(symbol, "Symbol is required");
            Objects.requireNonNull(tradeType, "Trade type is required");
            Objects.requireNonNull(quantity, "Quantity is required");
            Objects.requireNonNull(strategyName, "Strategy name is required");
            
            if (quantity.compareTo(BigDecimal.ZERO) <= 0) {
                throw new IllegalArgumentException("Quantity must be positive");
            }
            
            if (confidence < 0.0 || confidence > 1.0) {
                throw new IllegalArgumentException("Confidence must be between 0.0 and 1.0");
            }
            
            return new TradingSignal(this);
        }
    }
}